
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

hunter_output_factor = {
	base = 1
	modifier = {
		add = modifier:planet_pops_upkeep_mult
	}
	modifier = {
		add = modifier:planet_pops_food_upkeep_mult
	}
}

hunter_output_factor_lithoid = {
	base = 1
	modifier = {
		add = modifier:planet_pops_upkeep_mult
	}
	modifier = {
		add = modifier:planet_pops_minerals_upkeep_mult
	}
}

fairy_growth_limit = {
	base = 0
	modifier = {
		add = trigger:free_district_slots
	}
	modifier = {
		mult = 6
		OR = {
			is_planet_class = pc_city
			is_planet_class = pc_gaia
			is_planet_class = pc_hive
		}
	}
	modifier = {
		mult = 4
		NOR = {
			is_planet_class = pc_city
			is_planet_class = pc_gaia
			is_planet_class = pc_hive
			is_planet_class = pc_habitat
			is_planet_class = pc_nuked
			is_planet_class = pc_machine
		}
	}
	modifier = {
		mult = 3
		OR = {
			is_planet_class = pc_habitat
			is_planet_class = pc_nuked
			is_planet_class = pc_machine
		}
	}
	modifier = {
		add = trigger:num_housing
	}
}

fairy_growth_speed = {
	base = 0
	modifier = {
		add = trigger:free_district_slots
	}
	modifier = {
		mult = 6
		OR = {
			is_planet_class = pc_city
			is_planet_class = pc_gaia
			is_planet_class = pc_hive
		}
	}
	modifier = {
		mult = 4
		NOR = {
			is_planet_class = pc_city
			is_planet_class = pc_gaia
			is_planet_class = pc_hive
			is_planet_class = pc_habitat
			is_planet_class = pc_nuked
			is_planet_class = pc_machine
		}
	}
	modifier = {
		mult = 3
		OR = {
			is_planet_class = pc_habitat
			is_planet_class = pc_nuked
			is_planet_class = pc_machine
		}
	}
	modifier = {
		add = trigger:num_housing
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_trait = trait_iwoi_fairy }
		}
		mode = subtract
	}
	square_root = yes
	min = 2
	floor = yes
}

fairy_habitabilit_add = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_trait = trait_iwoi_fairy }
		}
		mode = add
	}
}

unfriendly_happiness_factor = {
	base = 1
	modifier = {
		subtract = trigger:happiness
	}
}

death_people_growth_speed = {
	base = 1
	modifier = {
		add = modifier:pop_growth_speed_reduction
	}
}

doll_missing_per_maker = {
	base = 0
	add = modifier:doll_control_limit
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_trait = trait_iwoi_doll }
		}
		mode = subtract
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = job_dollmaker }
		}
		mode = divide
	}
}

magicial_trans_cooldown = {
	base = 10
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = job_archmage }
		}
		mode = subtract
	}
	max = 10
	min = 1
}

job_total_research_output_modifier = {
	base = 1
	complex_trigger_modifier = {
		trigger = check_economic_production_modifier_for_job
		parameters = {
			job = $JOB$
			resource = {
				physics_research = 0.34
				society_research = 0.33
				engineering_research = 0.33
			}
			species_modifiers_only = no #Note this
		}
		mode = add
	}
}

miko_unity_output_modifier = {
	base = 4
	mult = value:job_total_output_modifier|JOB|priest|RESOURCE|unity|
}

miko_research_output_modifier = {
	base = 1
	modifier = {
		add = 1
		has_trait = trait_latent_psionic
	}
	modifier = {
		add = 2
		has_trait = trait_latent_psionic
	}
	mult = value:job_total_research_output_modifier|JOB|researcher|
}

sinnshoku_unity_output_modifier = {
	base = 6
	mult = value:job_total_output_modifier|JOB|high_priest|RESOURCE|unity|
}

sinnshoku_research_output_modifier = {
	base = 0
	mult = value:job_total_research_output_modifier|JOB|head_researcher|
}