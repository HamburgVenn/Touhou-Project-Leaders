namespace = touhou_paragon_spell

country_event = {
    id = touhou_paragon_spell.10000
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        any_owned_leader = {
            has_touhou_supernatural_trait = yes
        }
    }

    immediate = {
        while = {
            limit = {
                resource_stockpile_compare = {
                    resource = thl_mana
                    value >= value:mana_need_per_bomb
                }
            }
            add_resource = {
                thl_mana = -1
                multiplier = value:mana_need_per_bomb
            }
            add_resource = {
                thl_bomb = 1
            }
        }
        export_resource_stockpile_to_variable = {
            resource = thl_mana
            variable = interface_mana
        }
        round_variable = interface_mana
        export_resource_stockpile_to_variable = {
            resource = thl_bomb
            variable = interface_bomb
        }
        round_variable = interface_bomb
        set_variable = {
            which = interface_mana_need
            value = value:mana_need_per_bomb
        }
    }
}

fleet_event = {
    id = touhou_paragon_spell.1
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        set_event_locked = no
        solar_system = {
            star = {
                create_ambient_object = {
                    type = contingency_2
                }
                last_created_ambient_object = {
                    set_ambient_object_flag = reimu_trap_object
                }
            }
            set_star_flag = reimu_trap_system
            system_event = {
                id = touhou_paragon_spell.3
                days = 720
            }
        }
    }
}

fleet_event = {
    id = touhou_paragon_spell.2
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        from = {
            has_star_flag = reimu_trap_system
        }
        owner = {
            OR = {
                is_hostile = from.owner
                is_at_war_with = from.owner
            }
        }
    }

    immediate = {
        add_modifier = {
            modifier = huuin_modifier
            days = 180
        }
    }
}

system_event = {
    id = touhou_paragon_spell.3
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        every_system_ambient_object = {
            limit = {
                has_ambient_object_flag = reimu_trap_object
            }
            destroy_ambient_object = this
        }
        remove_star_flag = reimu_trap_system
    }
}

system_event = {
    id = touhou_paragon_spell.4
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        every_system_megastructure = {
            limit = {
                is_megastructure_type = reimu_gateway
            }
            delete_megastructure = this
        }
        remove_star_flag = reimu_gateway_planet
    }
}

fleet_event = {
    id = touhou_paragon_spell.5
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        set_fleet_settings = {
            is_boss = no
        }
    }
}

#符卡清理
fleet_event = {
    id = touhou_paragon_spell.6
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        every_owned_ship = {
            delete_ship = this
        }
    }
}

#小行星撞击
planet_event = {
    id = touhou_paragon_spell.7
    title = "touhou_paragon_spell.7.name"
    desc = {
        text = touhou_paragon_spell.7.desc
    }
    picture = GFX_evt_nuclear_explosion
    show_sound = event_super_explosion
    location = ROOT

    is_triggered_only = yes

    immediate = {
        set_planet_flag = asteroid_impected

        #Dismantle observation post
        if = {
            limit = {
                has_observation_outpost = yes
            }
            observation_outpost_owner = {
                country_event = { id = planet_destruction.1000 days = 1 }
            }
        }

        # Contingency Machine World
        if = {
            limit = {
                is_planet_class = pc_ai
                NOT = { has_planet_flag = machine_lair }
            }
            planet_event = { id = crisis.2040 }
        }

        # Contingency Final Machine World
        if = {
            limit = {
                is_planet_class = pc_ai
                has_planet_flag = machine_lair
            }
            from.owner = { save_event_target_as = final_machine_world_destroyer }
            stop_crisis_sound = yes
            planet_event = { id = crisis.2046 }
        }

        # Swarm Situation Log counter
        if = {
            limit = {
                exists = owner
                owner = { is_country_type = swarm }
            }
            every_country = {
                limit = { has_event_chain = "prethoryn_scourge_chain" }
                add_event_chain_counter = {
                    event_chain = "prethoryn_scourge_chain"
                    counter = "infested_worlds"
                    amount = -1
                }
                add_event_chain_counter = {
                    event_chain = "prethoryn_scourge_chain"
                    counter = "infested_worlds_cleansed"
                    amount = 1
                }
            }
        }

        if = {
            limit = {
                OR = {
                    is_active_resolution = "resolution_rulesofwar_reverence_for_life"
                    is_active_resolution = "resolution_rulesofwar_independent_tribunals"
                    is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
                    is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
                }
            }
            from.owner = {
                set_timed_country_flag = { flag = resolution_breached_fired_cracker days = 3600 }
            }
        }

        # Exterminatus Achievement
        if = {
            limit = { is_capital = yes }
            from.owner = { set_country_flag = exterminatus }
        }
        if = {
            limit = {
                exists = owner
                owner = {
                    NOT = { is_same_value = from.owner }
                    OR = {
                        is_country_type = default
                        is_country_type = fallen_empire
                        is_country_type = awakened_fallen_empire
                    }
                }
            }
            # Generate threat
            if = {
                limit = {
                    is_colony = yes
                }
                add_threat = { who = from.owner amount = 3 }
                # modifier for allies + those upset by genocide
                every_country = {
                    limit = {
                        NOR = {
                            is_same_value = from.owner
                            is_same_value = root.owner
                            AND = {
                                has_federation = yes
                                is_in_federation_with = from.owner
                            }
                        }
                        OR = {
                            has_communications = from.owner
                            has_communications = root.owner
                        }
                        OR = {
                            AND = {
                                has_federation = yes
                                is_in_federation_with = root.owner
                            }
                            has_ai_personality = awakened_fallen_empire_xenophile
                            AND = {
                                is_country_type = default
                                OR = {
                                    is_egalitarian = yes
                                    is_xenophile = yes
                                }
                            }
                        }
                    }
                    if = {
                        limit = { root = { is_colony = no } }
                        add_opinion_modifier = {
                            modifier = opinion_asteroid_impected_an_uninhabited_world
                            who = from.owner
                        }
                    }
                    else = {
                        add_opinion_modifier = {
                            modifier = opinion_asteroid_impected_a_world
                            who = from.owner
                        }
                    }
                }
            }
            else = {
                add_threat = { who = from.owner amount = 1 }
            }
            # modifiers for victim
            owner = {
                if = {
                    limit = { root = { is_colony = no } }
                    add_opinion_modifier = {
                        modifier = opinion_asteroid_impected_my_uninhabited_world
                        who = from.owner
                    }
                }
                else = {
                    add_opinion_modifier = {
                        modifier = opinion_asteroid_impected_my_world
                        who = from.owner
                    }
                }
                if = {
                    limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
                    add_modifier = {
                        modifier = colossus_victim
                        days = 10800 # 30 years
                    }
                }
            }
            if = {
                limit = {
                    exists = owner
                    owner = { is_country_type = primitive }
                }
                # modifier for allies + those upset by genocide
                every_country = {
                    limit = {
                        NOT = { is_same_value = from.owner }
                        OR = {
                            has_communications = from.owner
                            has_communications = root.owner
                        }
                        OR = {
                            has_ai_personality = awakened_fallen_empire_xenophile
                            AND = {
                                is_country_type = default
                                NOR = {
                                    is_xenophobe = yes
                                    is_homicidal = yes
                                    is_xenophile = yes
                                }
                            }
                        }
                    }
                    add_opinion_modifier = {
                        modifier = opinion_asteroid_impected_a_primitive_world
                        who = from.owner
                    }
                }
                every_country = {
                    limit = {
                        NOT = { is_same_value = from.owner }
                        OR = {
                            has_communications = from.owner
                            has_communications = root.owner
                        }
                        OR = {
                            has_ai_personality = awakened_fallen_empire_xenophile
                            AND = {
                                is_country_type = default
                                is_xenophile = yes
                            }
                        }
                    }
                    add_opinion_modifier = {
                        modifier = opinion_asteroid_impected_a_primitive_world_phile
                        who = from.owner
                    }
                }
            }
        }
        # Add war exhaustion to planet owner
        if = {
            limit = {
                exists = owner
            }
            owner = {
                if = {
                    limit = { #isn't the case when the crisis bombards planets, for instance
                        is_at_war_with = from.fleet.owner
                    }
                    add_static_war_exhaustion = {
                        attacker = from.fleet.owner
                        location = root
                        value_for_planet_destruction = 1.0
                    }
                }
            }
        }
        every_owned_pop = {
            kill_pop = yes
        }
        if = {
            limit = {
                exists = orbital_defence
            }
            destroy_fleet = orbital_defence
        }
        remove_all_buildings = yes
        # destroy habitats and ringworlds
        if = {
            limit = {
                is_planet_class = pc_habitat
            }
            spawn_habitat_cracker_effect = yes
        }
        else_if = {
            limit = {
                is_ringworld = yes
            }
            spawn_ringworld_cracker_effect = yes
            change_pc = pc_ringworld_habitable_damaged
        }
        else_if = {
            limit = { habitable_planet = yes }
            change_pc = pc_molten
            clear_deposits = yes
            random_list = {
                1 = {
                    add_deposit = d_alloys_4
                }
                1 = {
                    add_deposit = d_alloys_3
                }
                1 = {
                    add_deposit = d_alloys_2
                }
                1 = {
                    add_deposit = d_alloys_1
                }
            }
        }
        else_if = {
            limit = { is_artificial = no }
            change_pc = pc_molten
            clear_deposits = yes
            random_list = {
                1 = {
                    add_deposit = d_minerals_4
                }
                1 = {
                    add_deposit = d_minerals_3
                }
                1 = {
                    add_deposit = d_minerals_2
                }
                1 = {
                    add_deposit = d_minerals_1
                }
            }
        }
        else = {
            remove_planet = yes
        }
        from = {
            every_owned_ship = {
                delete_ship = this
            }
        }
    }

    option = {
        name = colony.183.a
    }

    after = {
        remove_planet_flag = asteroid_impected
    }
}
